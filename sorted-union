function uniteUnique(arr, ...args) {
  let totalArr = arr.concat(...args);
  return totalArr.filter((item, index) => totalArr.indexOf(item) == index);
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

// *Facepalm* Remember that if you want to use curly braces and put a function on several lines,
// you actually return something. I left it in arrow function form because it is shorter. Found
// this snippet of code that helped me find duplicates. It works because indexOf(item) will return
// the index of the first instance of that item while index returns the place in the loop. When we 
// get to a duplicate value, index delivers the next item index, but indexOf(item) throws the index 
// of the first place the item was encountered which will be less. Anywhere they are not equal gets
// filtered out.
